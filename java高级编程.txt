// ==========================================================================
// === 基本数据的自动拆装箱及享元设计模式
// ==========================================================================
享元模式：	如果很多很小的对象有很多相同的东西，将之变为一个对象，相同的属性作为内部状态。不同的作为外部状态，通过参数传入。
	小的整数（-128~127）在装箱时装出同一个对象，大的装出不同的对象~
// ==========================================================================
// === 集合
// ==========================================================================
HashSet:
hashcode不等equals为false可以插入同一个HashSet；
hashcode相等而equals为false可以插入同一个HashSet；
hashcode不等equals为true可以插入同一个HashSet；
hashcode相等equals为true不能插入同一个HashSet。
即只有当两个对象的hashcode相等且equals比较为true时第二个对象才不能插入hashset

如果两个对象的equals相等，一定要让它们的hashcode相等

当一个对象被存储进hashSet集合中后就不要修改参与hashcode运算的字段，否则将导致内存泄露


// ==========================================================================
// === java异常
// ==========================================================================
1.Checked Exception（非Runtime Exception）  继承自Exception，而不继承自RuntimeException类
RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常
2.Unchecked Exception（Runtime Exception）  直接或者间接地继承自RuntimeException类
都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。

try
    {
         // 可能发生异常的代码
      　　// 如果发生了异常，那么异常之后的代码都不会被执行
    }
    catch (Exception e)
    {
        // 异常处理代码，可以有多个catch
    }
    finally
    {
        // 不管有没有发生异常，finally语句块都会被执行
    }
	
可以有多个catch块，去捕获不同的异常，真正执行的时候最多只进入一个catch块，这时需要将父类型的catch块放到子类型的catch块之后，这样才能保证后续的catch块可能被执行，否则子类型的catch块将永远无法到达，Java编译器会报错。如果异常类型是独立的，那么它们的前后顺序没有要求。

子类不能比父类抛出更广泛的异常。

try块中有return语句时，仍然会首先执行finally块中的语句，然后方法再返回。如果try块中存在System.exit(0);语句，那么就不会执行finally块中的代码，因为System.exit(0)会终止当前运行的Java虚拟机，程序会在虚拟机终止前结束执行。

对于非运行时异常（checked exception），必须要对其进行处理，否则无法通过编译。
	处理方式有两种：

	　　1.使用try..catch..finally进行捕获；

	　　2.在产生异常的方法声明后面写上throws 某一个Exception类型，如throws Exception，将异常抛出到外面一层去。如果main方法也将异常抛出，则交给Java虚拟机来处理
	
对于运行时异常（runtime exception），可以对其进行处理，也可以不处理。推荐不对运行时异常进行处理。
// ==========================================================================
// === 多线程
// ==========================================================================
多个进程的内部数据和状态都是完全独立的，而多线程是共享一块内存空间和一组系统资源，有可能互相影响。
线程本身的数据通常只有寄存器数据，以及一个程序执行时使用的堆栈，所以线程的切换负担比进程切换的负担要小。
在创建之初，线程被限制到一个组里，而且不能改变到一个不同的组。
若创建多个线程而不指定一个组，它们就会与创建它的线程属于同一个组。

线程的实现
　　在Java中通过run方法为线程指明要完成的任务，有两种技术来为线程提供run方法：

　　1.继承Thread类并重写它的run方法。之后创建这个子类的对象并调用start()方法。

　　2.通过定义实现Runnable接口的类进而实现run方法。这个类的对象在创建Thread的时候作为参数被传入，然后调用start()方法。

　Thread类也实现了Runnable接口，因此实现了接口中的run()方法。

Thread类剖析
　　当生成一个线程对象时，如果没有为其指定名字，那么线程对象的名字将使用如下形式：Thread-number，该number是自动增加的数字，并被所有的Thread对象所共享，因为它是一个static的成员变量。

　　当使用第一种方式（继承Thread的方式）来生成线程对象时，我们需要重写run()方法，因为Thread类的run()方法此时什么事情也不做。

　　当使用第二种方式（实现Runnable接口的方式）来生成线程对象时，我们需要实现Runnable接口的run()方法，然后使用new Thread(new MyRunnableClass())来生成线程对象（MyRunnableClass已经实现了Runnable接口），这时的线程对象的run()方法会调用MyRunnableClass的run()方法。

停止线程
　　线程的消亡不能通过调用stop()命令，而是让run()方法自然结束。stop()方法是不安全的，已经废弃。

　　停止线程推荐的方式：设定一个标志变量，在run()方法中是一个循环，由该标志变量控制循环是继续执行还是跳出；循环跳出，则线程结束。


	如果一个变量是成员变量，那么多个线程对同一个对象的成员变量进行操作时，它们对该成员变量是彼此影响的，也就是说一个线程对成员变量的改变会影响到另一个线程。
　　如果一个变量是局部变量，那么每个线程都会有一个该局部变量的拷贝（即便是同一个对象中的方法的局部变量，也会对每一个线程有一个拷贝），一个线程对该局部变量的改变不会影响到其他线程。

当synchronized关键字修饰一个方法的时候，该方法叫做同步方法。

　Java中的每个对象都有一个锁（lock），或者叫做监视器（monitor），当一个线程访问某个对象的synchronized方法时，将该对象上锁，其他任何线程都无法再去访问该对象的synchronized方法了（这里是指所有的同步方法，而不仅仅是同一个方法），直到之前的那个线程执行方法完毕后（或者是抛出了异常），才将该对象的锁释放掉，其他线程才有可能再去访问该对象的synchronized方法。这时候是给对象上锁，如果是不同的对象，则各个对象之间没有限制关系。

如果某个synchronized方法是static的，那么当线程访问该方法时，它锁的并不是synchronized方法所在的对象，而是synchronized方法所在的类所对应的Class对象。Java中，无论一个类有多少个对象，这些对象会对应唯一一个Class对象，因此当线程分别访问同一个类的两个对象的两个static，synchronized方法时，它们的执行顺序也是顺序的，也就是说一个线程先去执行方法，执行完毕后另一个线程才开始。

　synchronized块写法：

　　synchronized(object)

　　{　     

　　}

　　表示线程在执行的时候会将object对象上锁。
可能一个方法中只有几行代码会涉及到线程同步问题，所以synchronized块比synchronized方法更加细粒度地控制了多个线程的访问，只有synchronized块中的内容不能同时被多个线程所访问，方法中的其他语句仍然可以同时被多个线程所访问（包括synchronized块之前的和之后的）。

　　注意：被synchronized保护的数据应该是私有的。

当线程调用了wait()方法时，线程暂停，它会释放掉对象的锁，必须要等待另外一个线程调用notify()或者notifyAll()方法。要确保调用wait()方法的时候拥有锁，即，wait()方法的调用必须放在synchronized方法或synchronized块中。

另一个会导致线程暂停的方法：Thread.sleep()，它会导致线程睡眠指定的毫秒数，但线程在睡眠的过程中是不会释放掉对象的锁的。

　wait()和notify()方法要求在调用时线程已经获得了对象的锁，因此对这两个方法的调用需要放在synchronized方法或synchronized块中。

　　一个线程变为一个对象的锁的拥有者是通过下列三种方法：

　　1.执行这个对象的synchronized实例方法。

　　2.执行这个对象的synchronized语句块。这个语句块锁的是这个对象。

　　3.对于Class类的对象，执行那个类的synchronized、static方法。

// ==========================================================================
// === 反射的基础Class类
// ==========================================================================
String cls1 = "abc";
Class cls1 = str1.getClass();
Class cls2 = String.class;
Class cls3 = Class.forName("java.lang.String");  （反射常用）
3个都是一份字节码，拿“==”比较两个字节码


九个预定义的Class实例对象，八大基本类型+void
int 和integer字节码不一样
int.class == Integer.class           false
int,class == Integer.TYPE             true

int[].class   不是原始类型是isArray

总之，只要在源程序中出现的类型，都有着Class实例对象，例如int[],void
// ==========================================================================
// === 反射
// ==========================================================================
反射就是把java类中的各种成分映射成相应的类

Constructor constructor = Class.forName("java.lang.String").getConstructor(StringBuffer class);
//获得方法时要用到类型
String str = (String)Construvtor newInstance(new StringBuffer("abc"));
//调用获得的方法是要用到上面相同类型的实例对象

String obj = (String)ClassforName("java.lang.Stirng").newInstance();
	该方法内部先得到默认的构造方法，然后用该构造方法创建实例对象；该方法内部的具体代码用到了缓存机制来保存默认构造方法的实例对象，反射会导致程序性能严重下降

如果传递给Method的invoke()方法的第一个参数为null，说明该method对应的是一个静态方法。

具有相同的元素类型和纬度的数组的Class具有同一个字节码

// ==========================================================================
// === 反射应用于框架
// ==========================================================================

Properties(类似于HashMap)可以把自己内存里面的键值对存到硬盘中，也可以在初始化中从一个文件中把自己的键值对加载进来

配置文件一定要用完整路径，但不是硬编码，而是运算出来的。使用getRealPath()；

// ==========================================================================
// === JavaBean以及内省
// ==========================================================================

Intorspector-->JavaBean-->特殊的java类，主要用于传递数据信息（值对象），其方法的名称符合某种特定的规则（get /set方法），且其方法主要用来访问私有字段

JavaBean的属性是根据get、set方法的名称推断出来的

Class Person{
	private int x;
	public int getAge(){
		return x;
	}
	public void setAge(int age){
		this.x = age;
	}
}
Age-->如果第二个字母是小的则把第一个字母变成小的,第二个字母为大写则第一个字母保持不变-->age
gettime-->time
getTime-->time
getCPU-->CPU
将上述类当做javabean处理时外界只知其有int类型的age属性，通过get、set方法进行操作，并不知属性x的存在


// ==========================================================================
// === 泛型
// ==========================================================================
泛型是提供给javac编译器使用的，可以限定集合中的输入类型，让编译器挡住源程序中的非法输入，编译器编译带类型说明的集合时会去除掉“类型”信息，使程序运行效率不收影响，对于参数化的泛型类型，getClass()方法的返回值和原始类型一样，由于编译生成的字节码会去掉泛型耳朵类型信息，只要能跳过编译器，就能往某个泛型集合中加入其它类型的数据，例如，用反射得到集合，再调用其add()方法即可。
Collection<Integer> collection = new ArrayList<Integer>();
collection.getClass().getMethod("add",Object.class).invoke(collection,"abc");
System.out.println(collection.get(0));
可以成功打印出abc，说明String类型的对象的确装入了Integer泛型的collection。

泛型的类型不考虑父子关系，只有相同的泛型类型可以“=”

使用“？”通配符可以引用其他各种参数的类型，“？”通配符定义的变量主要用作引用，可以调用与参数化无关的方法(collection.size())，不能调用与参数化有关的方法（collection.add("xxx")）。

Vector<? extends Number> x = new Vector<Integer>();
Vector<? super Integer> x = new Vector<Number>();
限定通配符总是包括自己
// ==========================================================================
// === 类加载器
// ==========================================================================
Bootstrap   JRE/lib/rt.jar
ExtClassLoader  JRE/lib/ext/.jar
AppClassLoader   classpath指定的所有jar或目录
	自己实现类加载器必须继承ClassLoader

Java虚拟机加载类时类加载器的选择
	首先当前线程的类加载器去加载线程中的第一个类；
	如果类A中引用了类B，Java虚拟机将使用类A的类加载去加载类B；
	还可以直接调用ClassLoader.loadClass()方法来指定某个类加载器去加载某个类。

	
类加载器的委托机制
	
   当前ClassLoader首先从自己已经加载的类中查询是否此类已经加载，如果已经加载则直接返回原来已经加载的类。

	1.每个类加载器都有自己的加载缓存，当一个类被加载了以后就会放入缓存，等下次加载的时候就可以直接返回了。
	2.当前classLoader的缓存中没有找到被加载的类的时候，委托父类加载器去加载，父类加载器采用同样的策略，首先查看自己的缓存，然后委托父类的父类去加载，一直到bootstrp ClassLoader.
	3.当所有的父类加载器都没有加载的时候，再由当前的类加载器加载，并将其放入它自己的缓存中，以便下次有加载请求的时候直接返回。   

   先委托给上级类加载器直到Bootstrap，若其没有加载到类，则往下放，在这个过程中如果加载到则由当前类加载器加载，否则下放到直至发起者加载器，如果还是找不到，则抛出ClassNotFoundException,不再向下寻找。

protected synchronized Class<?> loadClass(String name, boolean resolve)  throws ClassNotFoundException   
 {  // First, check if the class has already been loaded  Class c = findLoadedClass(name);
//检查class是否已经被加载过了  if (c == null)
 {     
 try {      
if (parent != null) {         
 c = parent.loadClass(name, false); //如果没有被加载，且指定了父类加载器，则委托父加载器加载。    
  } else {        
  c = findBootstrapClass0(name);//如果没有父类加载器，则委托bootstrap加载器加载      } 
     } catch (ClassNotFoundException e) {         
 // If still not found, then invoke findClass in order          
// to find the class.         
 c = findClass(name);//如果父类加载没有加载到，则通过自己的findClass来加载。      } 
 } 
 if (resolve) 
{     
 resolveClass(c); 
 }  
return c;
}

模板方法设计模式：总体流程在父类规定好，流程细节无法确定就空出来留待子类完成
父类-->loadClass（沿用委托机制）/findClass（覆盖该方法）/得到class文件的二进制数据装换成字节码-->defineClass

// ==========================================================================
// === 代理
// ==========================================================================

代理类与目标类具有相同的接口，代理类的每个方法调用目标类的相同方法，并在调用方法时加上系统功能的代码（目标方法前后或catch块内部）

如果采用工厂模式和配置文件的方式进行管理，则不需要修改客户端程序，在配置文件中配置是使用目标类还是代理类，这样以后很容易切换。

动态代理技术
	JVM可以在运行期动态生成出类的字节码，这种动态生成的类往往被用作代理类，即动态代理类。
	JVM生成的动态类必须实现一个或多个接口，所以，JVM生成的动态类只能用作具有相同接口的目标类的代理。
	CGLIB库可以动态生成一个类的子类，一个类的子类也可以用作该类的代理。所以，如果要为一个没有生成接口的类动态生成代理类，那么可以使用CGLIB库。
	
让JVM创建动态类及其实例对象

client程序调用objProxy.add("abc")方法时，涉及三要素：objProxy、add方法、"abc"参数
class Proxy${
	add(Object obj){
		return handler.invoke(this,this.getClass.getMethod("add"),obj);
	}
	int size(){
		return handler.invoke(this,this.getClass.getMethod("size"),null);
	}
	int clear(){
		return handler.invoke(this,this.getClass.getMethod("clear"),null);
	}
}

把要执行的代码装到一个对象的某个方法里，然后把这个对象作为参数传递，接收者只要调用这个对象的方法，即等于执行了外界提供的代码。

// ==========================================================================
// === Spring 的实现
// ==========================================================================
工厂类BeanFactory负责创建目标类或代理类的实例对象，并通过配置文件实现切换。其getBean方法根据参数字符串返回一个相应的实例对象，如果参数字符串在配置文件中对应的类名不是ProxyFactoryBean,则直接返回该类的对象，否则，返回该实例对象的getProxy方法返回的对象。

BeanFactory的构造方法接收代表配置文件的输入流对象，配置文件格式如下：
#xxx = java.util.ArrayList
xxx = cn.itcast.ProxyFactoryBean
xxx target = java.util.ArrayList
xxx advice = cn.itcast.MyAdvice

ProxyFactoryBean充当封装生成动态代理的工厂，需要为工厂类提供目标和advice
// ==========================================================================
// === 注解
// ==========================================================================
加了注解就等于为程序打上某种标记，打完标记以后，javac编译器，开发工具和其他程序可以用反射来了解你的类及各种元素上有无何种标记，看你有什么标记，就去干相应的事。标记可以加在包，类，字段，方法，方法的参数以及局部变量上。

对“应用了注解的类”进行反射操作的类---------------->应用了注解的类---------------->注解类
Class C{				                               	Class  B{}					@interface A{}
B class isAnnotationPresent(A class);
A a = B class.getAnnotation(A class);
}

RetetionPollcy.SOURCE	： java源文件
RetetionPollcy.CLASS	：  class文件
RetetionPollcy.RUNTIME	：  内存中的字节码




